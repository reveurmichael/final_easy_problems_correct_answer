/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package final_easy;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class DontModifyThisFile {
  private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
  private final PrintStream originalOut = System.out;

  public FinalExamEasyCorrectAnswer f = new FinalExamEasyCorrectAnswer();
  public int[] ss = new int[]{1345066,
          5476193, 12814717,
          51607799, 97428615,
          57348973, 31982953,
          3227635,
          2943006,
          2819480};

  public static void main(String[] args) throws IOException {
    t10();
  }

  public static int t1(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += String.valueOf(d.f.checkIfANumberIsEven(100));
    s += String.valueOf(d.f.checkIfANumberIsEven(55));
    s += String.valueOf(d.f.checkIfANumberIsEven(33));
    s += String.valueOf(d.f.checkIfANumberIsEven(44));
    s += String.valueOf(d.f.checkIfANumberIsEven(2));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t2(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += String.valueOf(d.f.getDayOfTheWeek(1));
    s += String.valueOf(d.f.getDayOfTheWeek(2));
    s += String.valueOf(d.f.getDayOfTheWeek(4));
    s += String.valueOf(d.f.getDayOfTheWeek(5));
    s += String.valueOf(d.f.getDayOfTheWeek(6));
    s += String.valueOf(d.f.getDayOfTheWeek(7));
    s += String.valueOf(d.f.getDayOfTheWeek(9));
    s += String.valueOf(d.f.getDayOfTheWeek(10));
    s += String.valueOf(d.f.getDayOfTheWeek(3));
    s += String.valueOf(d.f.getDayOfTheWeek(2));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t3(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += String.valueOf(d.f.computePIWithSeriesExpansion(19));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(3));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(9));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(5));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(11));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(7));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(9));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(10));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(23));
    s += String.valueOf(d.f.computePIWithSeriesExpansion(33));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t4(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += Arrays.deepToString(d.f.Question4(2));
    s += Arrays.deepToString(d.f.Question4(4));
    int[][] arr2d = d.f.Question4(5);
    arr2d[4][4] = -99999;
    d.f.print2DIntArrayAndChangeNegativeToZero(arr2d);
    s += Arrays.deepToString(arr2d);
    s += Arrays.deepToString(d.f.Question4(6));
    s += Arrays.deepToString(d.f.Question4(7));
    s += Arrays.deepToString(d.f.Question4(9));
    s += Arrays.deepToString(d.f.Question4(10));
    s += Arrays.deepToString(d.f.Question4(3));
    s += Arrays.deepToString(d.f.Question4(2));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t5(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += Arrays.deepToString(d.f.Question5(2));
    s += Arrays.deepToString(d.f.Question5(4));
    s += Arrays.deepToString(d.f.Question5(5));
    s += Arrays.deepToString(d.f.Question5(6));
    s += Arrays.deepToString(d.f.Question5(7));
    s += Arrays.deepToString(d.f.Question5(9));
    s += Arrays.deepToString(d.f.Question5(10));
    s += Arrays.deepToString(d.f.Question5(3));
    s += Arrays.deepToString(d.f.Question5(2));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t6(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    s += String.valueOf(d.f.Question6(19));
    s += String.valueOf(d.f.Question6(3));
    s += String.valueOf(d.f.Question6(9));
    s += String.valueOf(d.f.Question6(5));
    s += String.valueOf(d.f.Question6(11));
    s += String.valueOf(d.f.Question6(7));
    s += String.valueOf(d.f.Question6(9));
    s += String.valueOf(d.f.Question6(10));
    s += String.valueOf(d.f.Question6(23));
    s += String.valueOf(d.f.Question6(33));

    System.out.println(d.h(s));
    return d.h(s);
  }


  public static int t7(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    MyData[] arr = {
            new MyData(10),
            new MyData(4),
            new MyData(88),
            new MyData(13),
            new MyData(41),
            new MyData(43),
            new MyData(45),
            new MyData(14),
            new MyData(19)
    };
    s += Arrays.deepToString(d.f.sortArrayUsingBubbleOrSelectionSort(arr));
    MyData[] arr2 = {
            new MyData(10),
            new MyData(13),
            new MyData(41),
            new MyData(14),
            new MyData(4),
            new MyData(88),
            new MyData(888),
            new MyData(818),
            new MyData(1229),
            new MyData(1339)
    };
    s += Arrays.deepToString(d.f.sortArrayUsingBubbleOrSelectionSort(arr2));
    MyData[] arr3 = {
            new MyData(10),
            new MyData(41),
            new MyData(14),
            new MyData(19),
            new MyData(1999),
            new MyData(4),
            new MyData(88),
            new MyData(8338),
            new MyData(13)
    };
    s += Arrays.deepToString(d.f.sortArrayUsingBubbleOrSelectionSort(arr3));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t8(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    MyData[] arr = {
            new MyData(10),
            new MyData(4),
            new MyData(88),
            new MyData(13),
            new MyData(133),
            new MyData(41),
            new MyData(14),
            new MyData(144),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question8(arr));
    MyData[] arr2 = {
            new MyData(10),
            new MyData(13),
            new MyData(41),
            new MyData(14),
            new MyData(4),
            new MyData(88),
            new MyData(888),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question8(arr2));
    MyData[] arr3 = {
            new MyData(10),
            new MyData(41),
            new MyData(14),
            new MyData(19),
            new MyData(119),
            new MyData(4),
            new MyData(88),
            new MyData(13)
    };
    s += String.valueOf(d.f.Question8(arr3));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t9(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    MyData[] arr = {
            new MyData(10),
            new MyData(4),
            new MyData(88),
            new MyData(13),
            new MyData(133),
            new MyData(41),
            new MyData(14),
            new MyData(144),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question9(arr));
    MyData[] arr2 = {
            new MyData(10),
            new MyData(13),
            new MyData(41),
            new MyData(14),
            new MyData(4),
            new MyData(88),
            new MyData(888),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question9(arr2));
    MyData[] arr3 = {
            new MyData(10),
            new MyData(41),
            new MyData(14),
            new MyData(19),
            new MyData(119),
            new MyData(4),
            new MyData(88),
            new MyData(13)
    };
    s += String.valueOf(d.f.Question9(arr3));

    System.out.println(d.h(s));
    return d.h(s);
  }

  public static int t10(){
    String s = "";
    DontModifyThisFile d = new DontModifyThisFile();
    MyData[] arr = {
            new MyData(10),
            new MyData(44),
            new MyData(88),
            new MyData(13),
            new MyData(133),
            new MyData(41),
            new MyData(1),
            new MyData(144),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question10(arr));
    MyData[] arr2 = {
            new MyData(10),
            new MyData(13),
            new MyData(41),
            new MyData(14),
            new MyData(14),
            new MyData(88),
            new MyData(888),
            new MyData(19)
    };
    s += String.valueOf(d.f.Question10(arr2));
    MyData[] arr3 = {
            new MyData(10),
            new MyData(41),
            new MyData(14),
            new MyData(19),
            new MyData(119),
            new MyData(4),
            new MyData(88),
            new MyData(13)
    };
    s += String.valueOf(d.f.Question10(arr3));

    System.out.println(d.h(s));
    return d.h(s);
  }


  public int h(String s){
    char[] c = s.toCharArray();
    int hhh = 0;
    int i = 1;
    for(char _c: c){
      hhh += ((((int) _c * 541) % 479) * ((i * 311) % 491));
      i ++;
    }
    return hhh;
  }

  public void grable() {
    int r = 0;
    int i = 5;
    if(ss[0] == t1()) r += i;
    if(ss[1] == t2()) r += i;
    if(ss[2] == t3()) r += i;
    if(ss[3] == t4()) r += i;
    if(ss[4] == t5()) r += i;
    if(ss[5] == t6()) r += i;
    if(ss[6] == t7()) r += i;
    if(ss[7] == t8()) r += i;
    if(ss[8] == t9()) r += i;
    if(ss[9] == t10()) r += i;
    String rrr = String.valueOf(r);
    try {
      BufferedWriter bw = new BufferedWriter(new FileWriter("grable/grable"));
      bw.write(rrr);
      bw.close();
    }
    catch (Exception e){}
  }

  @Test
  public void test1(){
    assertEquals(ss[0], t1());
  }

  @Test
  public void test2(){
    assertEquals(ss[1], t2());
  }

  @Test
  public void test3(){
    assertEquals(ss[2], t3());
  }

  @Test
  public void test4(){
    assertEquals(ss[3], t4());
  }

  @Test
  public void test5(){
    assertEquals(ss[4], t5());
  }

  @Test
  public void test6(){
    assertEquals(ss[5], t6());
  }

  @Test
  public void test7() throws IOException {
    assertEquals(ss[6], t7());
  }

  @Test
  public void test8() throws IOException {
    assertEquals(ss[7], t8());
  }

  @Test
  public void test9(){
    assertEquals(ss[8], t9());
  }

  @Test
  public void test10(){
    assertEquals(ss[9], t10());
  }

  @Before
  public void setUpStreams() {
    System.setOut(new PrintStream(outContent));
  }

  @After
  public void restoreStreams() {
    grable();
    System.setOut(originalOut);
  }

}
